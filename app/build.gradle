apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'

android {
    compileSdk = 36
    buildToolsVersion = "35.0.0"

    defaultConfig {
        applicationId = "com.simon.app"
        minSdk = 31
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"
        
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
    
    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro')
        }
        debug {
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    
    kotlin {
        jvmToolchain(21)
    }
    
    namespace = 'com.simon.app'
    
    buildFeatures {
        compose = true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.8'
    }
    
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs "-javaagent:${classpath.find { it.name.contains("mockito-core") }}"
            }
        }
    }
}


dependencies {
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    
    // Jetpack Compose
    implementation platform('androidx.compose:compose-bom:2025.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material-icons-core'
    implementation 'androidx.activity:activity-compose:1.11.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // WebRTC
    implementation 'io.github.webrtc-sdk:android:137.7151.04'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    
    // JSON
    implementation 'com.google.code.gson:gson:2.13.2'
    
    // HTTP Client
    implementation 'com.squareup.okhttp3:okhttp:5.2.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.20.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:6.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2'
    testImplementation 'org.robolectric:robolectric:4.16'
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.2.0'
    
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/jacocoTestReport/html')
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${layout.buildDirectory.get().asFile}/intermediates/javac/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${layout.buildDirectory.get().asFile}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    executionData.setFrom(fileTree(dir: layout.buildDirectory.get().asFile, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'jacoco/testDebugUnitTest.exec'
    ]))
}